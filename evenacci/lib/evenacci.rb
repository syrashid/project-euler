# frozen_string_literal: true

def evenacci(first = 1, second = 1)
  # Each new term in the Fibonacci sequence is generated by adding the
  # previous two terms. By starting with 1 and 2, the first 10 terms will be:

  # 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  # TODO: By considering the terms in the Fibonacci sequence whose values do
  # not exceed four million, find the sum of the even-valued terms.
  if second > 4_000_000
    0
  elsif second.even?
    second + evenacci(second, first + second)
  else
    evenacci(second, first + second)
  end
end

def goldenacci
  # When we take any two successive (one after the other) Fibonacci Numbers,
  # their ratio is very close to the Golden Ratio which is approximately
  # 1.618034

  # We also know that every third number is even, and with that in mind
  # we can use the golden ratio and the third indexes to solve

  # The equation for any fibonacci number is as follows
  # xn = (golden_ratio)^n - (1 - golden_ratio)^6 / sqrt(5)
  val = 2
  n = 3
  sum = 0
  while val < 4_000_000
    sum += val
    n += 3
    val = calc_fib_number(n)
  end
  sum
end

def calc_fib_number(num)
  ((((1.618033988**num) - ((1 - 1.618033988)**num)) / Math.sqrt(5))).round
end
